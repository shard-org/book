name: Preview

on:
  pull_request:

jobs:
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Install Hugo
        run: sudo snap install hugo
      - name: Checkout
        uses: actions/checkout@v3
      - name: Checkout Preview
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/book-preview
          path: preview
          ssh-key: ${{ secrets.PREVIEW_KEY }}
      - name: Build
        run: hugo --destination="preview/${{ github.event.number }}" --baseURL="https://${{ github.repository_owner }}.github.io/book-preview/${{ github.event.number }}/" --minify
      - name: Commit and Push
        run: |
          cd preview
          git config user.name "Actions"
          git config user.email "action@github.com"
          git add .
          git commit -m "Preview #${{ github.event.number }}" || true
          git push
      - name: Query Comments
        id: query_comments
        uses: actions/github-script@v6
        with:
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            })
            core.setOutput('should_comment', !comments.data.some((comment) => comment.user.login == 'github-actions[bot]'))
      - name: Wait for Preview
        id: wait_for_preview
        if: ${{ steps.query_comments.outputs.should_comment }}
        uses: actions/github-script@v6
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: 'book-preview'
            })
            let run = runs.data.workflow_runs[0]
            while (run.status != 'completed') {
              const response = await github.rest.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: 'book-preview',
                run_id: run.id
              })
              run = response.data
            }
            core.setOutput('should_comment', run.conclusion == 'success')
      - name: Comment
        if: ${{ steps.wait_for_preview.outputs.should_comment }}
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'Preview: https://${{ github.repository_owner }}.github.io/book-preview/${{ github.event.number }}/'
            })
